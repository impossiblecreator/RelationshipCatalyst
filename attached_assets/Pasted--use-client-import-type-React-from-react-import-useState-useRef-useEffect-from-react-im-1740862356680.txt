"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { useChat } from "ai/react"
import { Send, ChevronDown, ChevronUp, MessageSquare } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent } from "@/components/ui/card"

export default function ChatPage() {
  const [draftMessage, setDraftMessage] = useState("")
  const [showCoach, setShowCoach] = useState(true)
  const [coachFeedback, setCoachFeedback] = useState("")
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const { messages, input, handleInputChange, handleSubmit, isLoading } = useChat({
    api: "/api/chat",
  })

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages]) //Corrected dependency

  // Get AI coach feedback on draft message
  useEffect(() => {
    const debouncedAnalysis = setTimeout(async () => {
      if (draftMessage.trim().length > 10) {
        setIsAnalyzing(true)
        try {
          const response = await fetch("/api/analyze", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: draftMessage }),
          })

          if (response.ok) {
            const data = await response.json()
            setCoachFeedback(data.feedback)
          }
        } catch (error) {
          console.error("Error analyzing message:", error)
        } finally {
          setIsAnalyzing(false)
        }
      } else if (draftMessage.trim().length === 0) {
        setCoachFeedback("")
      }
    }, 800)

    return () => clearTimeout(debouncedAnalysis)
  }, [draftMessage])

  const handleDraftChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setDraftMessage(e.target.value)
  }

  const handleMessageSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (draftMessage.trim()) {
      handleInputChange({ target: { value: draftMessage } } as React.ChangeEvent<HTMLInputElement>)
      handleSubmit(e)
      setDraftMessage("")
      setCoachFeedback("")
    }
  }

  return (
    <div className="flex flex-col h-screen max-w-3xl mx-auto bg-gray-50 border-x border-gray-200">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-2">
          <div className="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center text-white">
            <MessageSquare size={20} />
          </div>
          <div>
            <h1 className="font-semibold">Chat Companion</h1>
            <p className="text-xs text-gray-500">Online</p>
          </div>
        </div>
        <Button variant="ghost" size="sm" onClick={() => setShowCoach(!showCoach)} className="flex items-center gap-1">
          AI Coach {showCoach ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
        </Button>
      </div>

      {/* Chat Area */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message, index) => {
          const isUser = message.role === "user"
          const isLastMessage = index === messages.length - 1 && !isUser

          return (
            <div key={index} className={`flex ${isUser ? "justify-end" : "justify-start"}`}>
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-2 ${
                  isUser ? "bg-blue-500 text-white rounded-br-sm" : "bg-gray-200 text-gray-800 rounded-bl-sm"
                }`}
              >
                <p>{message.content}</p>
              </div>

              {/* AI Coach feedback on companion messages */}
              {!isUser && showCoach && (
                <div className="w-full mt-1">
                  <div className="text-xs text-purple-700 italic bg-purple-50 p-2 rounded-md border border-purple-100 ml-2 max-w-[80%]">
                    <p className="font-semibold">AI Coach:</p>
                    {isLastMessage && isLoading ? (
                      <p>Analyzing message...</p>
                    ) : (
                      <p>
                        This message seems {message.content.length > 50 ? "detailed and thoughtful" : "brief"}.
                        {message.content.includes("?")
                          ? " They're asking you a question, consider responding directly."
                          : ""}
                        {message.content.includes("!") ? " They seem enthusiastic about this topic." : ""}
                      </p>
                    )}
                  </div>
                </div>
              )}
            </div>
          )
        })}
        <div ref={messagesEndRef} />
      </div>

      {/* Draft Analysis Area */}
      {showCoach && (
        <Card className="mx-4 mb-2 border-purple-200 bg-purple-50">
          <CardContent className="p-3">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-semibold text-purple-700">AI Coach Feedback</h3>
              {isAnalyzing && <p className="text-xs text-purple-500">Analyzing...</p>}
            </div>
            <p className="text-xs text-purple-700 mt-1">
              {coachFeedback || "I'll provide feedback as you type your message..."}
            </p>
          </CardContent>
        </Card>
      )}

      {/* Message Input Area */}
      <div className="p-4 border-t bg-white">
        <form onSubmit={handleMessageSubmit} className="flex flex-col gap-2">
          <Textarea
            value={draftMessage}
            onChange={handleDraftChange}
            placeholder="Type your message..."
            className="min-h-[80px] resize-none"
          />
          <div className="flex justify-end">
            <Button type="submit" className="rounded-full" disabled={isLoading}>
              <Send size={18} className="mr-1" /> Send
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}

